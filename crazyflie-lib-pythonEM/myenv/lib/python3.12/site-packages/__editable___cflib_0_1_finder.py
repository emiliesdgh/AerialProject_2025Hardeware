from __future__ import annotations
import sys
from importlib.machinery import ModuleSpec, PathFinder
from importlib.machinery import all_suffixes as module_suffixes
from importlib.util import spec_from_file_location
from itertools import chain
from pathlib import Path

MAPPING: dict[str, str] = {'cflib': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/cflib', 'docs': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/docs', 'examples.aideck': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/aideck', 'examples.autonomy': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/autonomy', 'examples.cache': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/cache', 'examples.console': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/console', 'examples.led-ring': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/led-ring', 'examples.lighthouse': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/lighthouse', 'examples.link_quality': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/link_quality', 'examples.loco_nodes': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/loco_nodes', 'examples.logging': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/logging', 'examples.memory': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/memory', 'examples.mocap': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/mocap', 'examples.motors': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/motors', 'examples.multiranger': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/multiranger', 'examples.parameters': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/parameters', 'examples.positioning': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/positioning', 'examples.radio': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/radio', 'examples.step-by-step': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/step-by-step', 'examples.swarm': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/swarm', 'lpslib': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/lpslib', 'myenv': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/myenv', 'sys_test': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/sys_test', 'test.crazyflie': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/test/crazyflie', 'test.crtp': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/test/crtp', 'test.localization': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/test/localization', 'test.positioning': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/test/positioning', 'test.support': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/test/support', 'test.utils': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/test/utils', 'tools': '/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/tools'}
NAMESPACES: dict[str, list[str]] = {'tools': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/tools'], 'docs': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/docs'], 'myenv': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/myenv'], 'tools.build-docs': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/tools/build-docs'], 'tools.build': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/tools/build'], 'test.utils.fixtures': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/test/utils/fixtures'], 'test.localization.fixtures': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/test/localization/fixtures'], 'docs.functional-areas': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/docs/functional-areas'], 'docs.images': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/docs/images'], 'docs.development': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/docs/development'], 'docs.installation': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/docs/installation'], 'docs.user-guides': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/docs/user-guides'], 'docs.api': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/docs/api'], 'docs.api.template': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/docs/api/template'], 'examples.multiranger': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/multiranger'], 'examples.swarm': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/swarm'], 'examples.radio': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/radio'], 'examples.memory': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/memory'], 'examples.cache': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/cache'], 'examples.led-ring': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/led-ring'], 'examples.aideck': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/aideck'], 'examples.motors': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/motors'], 'examples.link_quality': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/link_quality'], 'examples.positioning': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/positioning'], 'examples.loco_nodes': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/loco_nodes'], 'examples.mocap': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/mocap'], 'examples.autonomy': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/autonomy'], 'examples.parameters': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/parameters'], 'examples.lighthouse': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/lighthouse'], 'examples.step-by-step': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/step-by-step'], 'examples.logging': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/logging'], 'examples.console': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/console'], 'examples.multiranger.wall_following': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/examples/multiranger/wall_following'], 'sys_test.single_cf_grounded': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/sys_test/single_cf_grounded'], 'myenv.bin': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/myenv/bin'], 'myenv.include': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/myenv/include'], 'myenv.lib': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/myenv/lib'], 'cflib.resources': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/cflib/resources'], 'cflib.resources.binaries': ['/Users/em/Desktop/EPFLMasterROBOTIQUE/MA4/AerialProject_2025Hardeware/crazyflie-lib-python/cflib/resources/binaries'], 'examples': [], 'test': []}
PATH_PLACEHOLDER = '__editable__.cflib-0.1.finder' + ".__path_hook__"


class _EditableFinder:  # MetaPathFinder
    @classmethod
    def find_spec(cls, fullname: str, path=None, target=None) -> ModuleSpec | None:  # type: ignore
        # Top-level packages and modules (we know these exist in the FS)
        if fullname in MAPPING:
            pkg_path = MAPPING[fullname]
            return cls._find_spec(fullname, Path(pkg_path))

        # Handle immediate children modules (required for namespaces to work)
        # To avoid problems with case sensitivity in the file system we delegate
        # to the importlib.machinery implementation.
        parent, _, child = fullname.rpartition(".")
        if parent and parent in MAPPING:
            return PathFinder.find_spec(fullname, path=[MAPPING[parent]])

        # Other levels of nesting should be handled automatically by importlib
        # using the parent path.
        return None

    @classmethod
    def _find_spec(cls, fullname: str, candidate_path: Path) -> ModuleSpec | None:
        init = candidate_path / "__init__.py"
        candidates = (candidate_path.with_suffix(x) for x in module_suffixes())
        for candidate in chain([init], candidates):
            if candidate.exists():
                return spec_from_file_location(fullname, candidate)
        return None


class _EditableNamespaceFinder:  # PathEntryFinder
    @classmethod
    def _path_hook(cls, path) -> type[_EditableNamespaceFinder]:
        if path == PATH_PLACEHOLDER:
            return cls
        raise ImportError

    @classmethod
    def _paths(cls, fullname: str) -> list[str]:
        paths = NAMESPACES[fullname]
        if not paths and fullname in MAPPING:
            paths = [MAPPING[fullname]]
        # Always add placeholder, for 2 reasons:
        # 1. __path__ cannot be empty for the spec to be considered namespace.
        # 2. In the case of nested namespaces, we need to force
        #    import machinery to query _EditableNamespaceFinder again.
        return [*paths, PATH_PLACEHOLDER]

    @classmethod
    def find_spec(cls, fullname: str, target=None) -> ModuleSpec | None:  # type: ignore
        if fullname in NAMESPACES:
            spec = ModuleSpec(fullname, None, is_package=True)
            spec.submodule_search_locations = cls._paths(fullname)
            return spec
        return None

    @classmethod
    def find_module(cls, _fullname) -> None:
        return None


def install():
    if not any(finder == _EditableFinder for finder in sys.meta_path):
        sys.meta_path.append(_EditableFinder)

    if not NAMESPACES:
        return

    if not any(hook == _EditableNamespaceFinder._path_hook for hook in sys.path_hooks):
        # PathEntryFinder is needed to create NamespaceSpec without private APIS
        sys.path_hooks.append(_EditableNamespaceFinder._path_hook)
    if PATH_PLACEHOLDER not in sys.path:
        sys.path.append(PATH_PLACEHOLDER)  # Used just to trigger the path hook
